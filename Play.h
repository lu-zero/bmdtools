/* -LICENSE-START-
** Copyright (c) 2009 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#include "DeckLinkAPI.h"

enum OutputSignal {
	kOutputSignalPip		= 0,
	kOutputSignalDrop		= 1
};


class Player : public IDeckLinkVideoOutputCallback, public IDeckLinkAudioOutputCallback
{
public:
	Player();

protected:
	bool							m_running;
	IDeckLink*						m_deckLink;
	IDeckLinkOutput*				m_deckLinkOutput;

	unsigned long					m_frameWidth;
	unsigned long					m_frameHeight;
	BMDTimeValue					m_frameDuration;
	BMDTimeScale					m_frameTimescale;
	unsigned long					m_framesPerSecond;
	unsigned long					m_totalFramesScheduled;

	OutputSignal					m_outputSignal;
	unsigned long					m_audioBufferSampleLength;
	unsigned long					m_audioBufferOffset;
	unsigned long					m_audioChannelCount;
	BMDAudioSampleRate				m_audioSampleRate;
	unsigned long					m_audioSampleDepth;

	// Generated message map functions

	// Signal Generator Implementation
	void			StartRunning (int videomode);
	void			FillQueues ();
	void			StopRunning ();
	void			ScheduleNextFrame (bool prerolling);
	void			WriteNextAudioSamples ();

	IDeckLinkDisplayMode *GetDisplayModeByIndex(int selectedIndex);

public:
	bool			Init(int videomode, int connection, int camera);

	// *** DeckLink API implementation of IDeckLinkVideoOutputCallback IDeckLinkAudioOutputCallback *** //
	// IUnknown needs only a dummy implementation
	virtual HRESULT STDMETHODCALLTYPE	QueryInterface (REFIID iid, LPVOID *ppv)	{return E_NOINTERFACE;}
	virtual ULONG STDMETHODCALLTYPE		AddRef ()									{return 1;}
	virtual ULONG STDMETHODCALLTYPE		Release ()									{return 1;}

	virtual HRESULT STDMETHODCALLTYPE	ScheduledFrameCompleted (IDeckLinkVideoFrame* completedFrame, BMDOutputFrameCompletionResult result);
	virtual HRESULT STDMETHODCALLTYPE	ScheduledPlaybackHasStopped ();

	virtual HRESULT STDMETHODCALLTYPE	RenderAudioSamples (bool preroll);
};

